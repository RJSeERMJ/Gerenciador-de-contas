const { MongoClient } = require('mongodb');

// String de conex√£o atualizada
const MONGODB_URI = 'mongodb+srv://jamarestudo:A91L9XOUYiCaHetq@familiajamar.wu9knb3.mongodb.net/familia-jamar?retryWrites=true&w=majority&appName=Familiajamar';
const DB_NAME = 'familia-jamar';
const COLLECTION_NAME = 'contas';

async function verificarSistemaCompleto() {
    let client = null;
    
    try {
        console.log('='.repeat(60));
        console.log('üîç VERIFICA√á√ÉO COMPLETA DO SISTEMA');
        console.log('='.repeat(60));
        console.log();
        
        // 1. Testar conex√£o
        console.log('üîó 1. TESTANDO CONEX√ÉO MONGODB ATLAS...');
        client = new MongoClient(MONGODB_URI, {
            useNewUrlParser: true,
            useUnifiedTopology: true,
        });
        
        await client.connect();
        console.log('‚úÖ Conex√£o estabelecida com sucesso!');
        console.log();
        
        // 2. Acessar banco e cole√ß√£o
        console.log('üìä 2. ACESSANDO BANCO DE DADOS...');
        const db = client.db(DB_NAME);
        const collection = db.collection(COLLECTION_NAME);
        console.log('‚úÖ Banco:', DB_NAME);
        console.log('‚úÖ Cole√ß√£o:', COLLECTION_NAME);
        console.log();
        
        // 3. Verificar dados existentes
        console.log('üìà 3. VERIFICANDO DADOS EXISTENTES...');
        const totalContas = await collection.countDocuments();
        console.log('üìä Total de contas no banco:', totalContas);
        
        if (totalContas > 0) {
            const contas = await collection.find({}).limit(3).toArray();
            console.log('üìã Primeiras 3 contas:');
            contas.forEach((conta, index) => {
                console.log(`   ${index + 1}. ID: ${conta.id} | ${conta.descricao} | R$ ${conta.valor} | Paga: ${conta.paga ? 'Sim' : 'N√£o'}`);
            });
        } else {
            console.log('üìù Nenhuma conta encontrada (banco vazio)');
        }
        console.log();
        
        // 4. Testar opera√ß√µes CRUD completas
        console.log('üß™ 4. TESTANDO OPERA√á√ïES CRUD...');
        
        // Criar conta de teste
        const contaTeste = {
            id: Date.now(),
            descricao: 'Conta de Teste - Verifica√ß√£o Completa',
            valor: '250.00',
            dataVencimento: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
            categoria: 'Teste',
            tipo: 'conta',
            recorrente: false,
            paga: false,
            dataCriacao: new Date().toISOString()
        };
        
        await collection.insertOne(contaTeste);
        console.log('‚úÖ CREATE: Conta criada com sucesso');
        
        // Ler conta
        const contaLida = await collection.findOne({ id: contaTeste.id });
        console.log('‚úÖ READ: Conta lida com sucesso');
        
        // Atualizar conta (simular bot√£o pagar)
        await collection.updateOne(
            { id: contaTeste.id },
            { 
                $set: { 
                    paga: true,
                    dataPagamento: new Date().toISOString()
                }
            }
        );
        console.log('‚úÖ UPDATE: Conta marcada como paga');
        
        // Verificar atualiza√ß√£o
        const contaAtualizada = await collection.findOne({ id: contaTeste.id });
        console.log('‚úÖ Verifica√ß√£o: Conta paga =', contaAtualizada.paga);
        
        // Deletar conta de teste
        await collection.deleteOne({ id: contaTeste.id });
        console.log('‚úÖ DELETE: Conta de teste removida');
        console.log();
        
        // 5. Verificar estrutura do banco
        console.log('üèóÔ∏è 5. VERIFICANDO ESTRUTURA DO BANCO...');
        const databases = await client.db().admin().listDatabases();
        const databaseNames = databases.databases.map(db => db.name);
        console.log('üìä Bancos dispon√≠veis:', databaseNames.join(', '));
        
        const collections = await db.listCollections().toArray();
        const collectionNames = collections.map(col => col.name);
        console.log('üìã Cole√ß√µes no banco:', collectionNames.join(', '));
        console.log();
        
        // 6. Resumo final
        console.log('üéØ 6. RESUMO DA VERIFICA√á√ÉO...');
        console.log('='.repeat(40));
        console.log('‚úÖ CONEX√ÉO MONGODB ATLAS: OK');
        console.log('‚úÖ ACESSO AO BANCO: OK');
        console.log('‚úÖ OPERA√á√ïES CRUD: OK');
        console.log('‚úÖ BOT√ÉO PAGAR: OK');
        console.log('‚úÖ ESTRUTURA DO BANCO: OK');
        console.log('='.repeat(40));
        console.log();
        
        console.log('üéâ SISTEMA TOTALMENTE INTEGRADO E FUNCIONANDO!');
        console.log();
        console.log('üìã PR√ìXIMOS PASSOS:');
        console.log('1. Configure MONGODB_URI no Vercel');
        console.log('2. Fa√ßa deploy: git push');
        console.log('3. Teste o sistema online');
        console.log('4. Acesse MongoDB Atlas para ver os dados');
        console.log();
        
        console.log('üåê PARA VER OS DADOS NO MONGODB ATLAS:');
        console.log('1. Acesse: https://cloud.mongodb.com');
        console.log('2. Fa√ßa login com suas credenciais');
        console.log('3. Clique em "Browse Collections"');
        console.log('4. Selecione: familia-jamar > contas');
        console.log('5. Visualize, edite e gerencie seus dados!');
        
    } catch (error) {
        console.log('‚ùå ERRO NA VERIFICA√á√ÉO:');
        console.log('   Erro:', error.message);
        console.log('   C√≥digo:', error.code);
        console.log();
        console.log('üí° Verifique:');
        console.log('   1. String de conex√£o correta');
        console.log('   2. Network Access (0.0.0.0/0)');
        console.log('   3. Cluster ativo');
        
    } finally {
        if (client) {
            await client.close();
            console.log('üîå Conex√£o fechada');
        }
        console.log('='.repeat(60));
    }
}

// Executar verifica√ß√£o
verificarSistemaCompleto(); 
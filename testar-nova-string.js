const { MongoClient } = require('mongodb');

// Nova string de conex√£o
const MONGODB_URI = 'mongodb+srv://jamarestudo:A91L9XOUYiCaHetq@familiajamar.wu9knb3.mongodb.net/familia-jamar?retryWrites=true&w=majority&appName=Familiajamar';
const DB_NAME = 'familia-jamar';
const COLLECTION_NAME = 'contas';

async function testarNovaString() {
    let client = null;
    
    try {
        console.log('='.repeat(50));
        console.log('üÜï TESTE DA NOVA STRING DE CONEX√ÉO');
        console.log('='.repeat(50));
        console.log();
        
        console.log('üîó Testando nova string de conex√£o...');
        console.log('üåê URI:', MONGODB_URI.replace(/\/\/.*@/, '//***:***@'));
        console.log();
        
        // Conectar ao MongoDB
        client = new MongoClient(MONGODB_URI, {
            useNewUrlParser: true,
            useUnifiedTopology: true,
        });
        
        await client.connect();
        console.log('‚úÖ Conectado ao MongoDB Atlas com sucesso!');
        
        // Testar acesso ao banco
        const db = client.db(DB_NAME);
        console.log('üìä Banco:', DB_NAME);
        
        // Testar acesso √† cole√ß√£o
        const collection = db.collection(COLLECTION_NAME);
        console.log('üìã Cole√ß√£o:', COLLECTION_NAME);
        
        // Contar documentos
        const totalContas = await collection.countDocuments();
        console.log('üìà Total de contas no banco:', totalContas);
        
        // Testar inser√ß√£o de uma conta de teste
        console.log('üß™ Testando inser√ß√£o de conta...');
        const contaTeste = {
            id: Date.now(),
            descricao: 'Conta de Teste - Nova String',
            valor: '200.00',
            dataVencimento: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
            categoria: 'Teste',
            tipo: 'conta',
            recorrente: false,
            paga: false,
            dataCriacao: new Date().toISOString()
        };
        
        await collection.insertOne(contaTeste);
        console.log('‚úÖ Conta de teste inserida com sucesso!');
        
        // Testar atualiza√ß√£o (simular bot√£o pagar)
        console.log('üí∞ Testando atualiza√ß√£o (bot√£o pagar)...');
        await collection.updateOne(
            { id: contaTeste.id },
            { 
                $set: { 
                    paga: true,
                    dataPagamento: new Date().toISOString()
                }
            }
        );
        console.log('‚úÖ Conta marcada como paga com sucesso!');
        
        // Verificar atualiza√ß√£o
        const contaAtualizada = await collection.findOne({ id: contaTeste.id });
        console.log('üîç Conta atualizada:', {
            id: contaAtualizada.id,
            descricao: contaAtualizada.descricao,
            paga: contaAtualizada.paga,
            dataPagamento: contaAtualizada.dataPagamento
        });
        
        // Remover conta de teste
        await collection.deleteOne({ id: contaTeste.id });
        console.log('üóëÔ∏è Conta de teste removida');
        
        console.log();
        console.log('üéâ NOVA STRING DE CONEX√ÉO FUNCIONANDO PERFEITAMENTE!');
        console.log('‚úÖ Conex√£o estabelecida');
        console.log('‚úÖ Opera√ß√µes de CRUD funcionando');
        console.log('‚úÖ Bot√£o pagar simulado com sucesso');
        console.log('üöÄ Sistema pronto para usar!');
        
    } catch (error) {
        console.log('‚ùå Erro ao testar nova string:');
        console.log('   Erro:', error.message);
        console.log('   C√≥digo:', error.code);
        console.log();
        console.log('üí° Verifique:');
        console.log('   1. Se a senha est√° correta');
        console.log('   2. Se o Network Access permite conex√£o (0.0.0.0/0)');
        console.log('   3. Se o cluster est√° ativo');
        
    } finally {
        if (client) {
            await client.close();
            console.log('üîå Conex√£o fechada');
        }
        console.log('='.repeat(50));
    }
}

// Executar teste
testarNovaString(); 
===============================================================================
                    DOCUMENTA√á√ÉO COMPLETA DO SISTEMA FAM√çLIA JAMAR
===============================================================================

üìÖ Data: Janeiro 2025
üîÑ Vers√£o: 1.0.0
üë®‚Äçüíª Desenvolvedor: Sistema de Controle Financeiro Familiar
üåê Deploy: Vercel + MongoDB Atlas

===============================================================================
                                √çNDICE
===============================================================================

1. ARQUITETURA GERAL
2. BACKEND (server-web.js)
3. FRONTEND (Interface)
4. BANCO DE DADOS
5. DEPLOY (Vercel)
6. SISTEMA DE NOTIFICA√á√ïES
7. SEGURAN√áA E CONFIABILIDADE
8. FUNCIONALIDADES PRINCIPAIS
9. VANTAGENS DO SISTEMA
10. ESTRUTURA DE ARQUIVOS
11. CONFIGURA√á√ïES
12. TROUBLESHOOTING

===============================================================================
                           1. ARQUITETURA GERAL
===============================================================================

üèóÔ∏è ESTRUTURA DO SISTEMA:

Sistema Fam√≠lia Jamar
‚îú‚îÄ‚îÄ Backend (Node.js + Express)
‚îÇ   ‚îú‚îÄ‚îÄ server-web.js (servidor principal)
‚îÇ   ‚îú‚îÄ‚îÄ MongoDB Atlas (banco de dados)
‚îÇ   ‚îî‚îÄ‚îÄ JSON local (fallback)
‚îú‚îÄ‚îÄ Frontend (HTML/CSS/JavaScript)
‚îÇ   ‚îú‚îÄ‚îÄ Interface responsiva
‚îÇ   ‚îú‚îÄ‚îÄ Dashboard interativo
‚îÇ   ‚îî‚îÄ‚îÄ Sistema de notifica√ß√µes
‚îî‚îÄ‚îÄ Deploy (Vercel)
    ‚îú‚îÄ‚îÄ Configura√ß√£o serverless
    ‚îî‚îÄ‚îÄ Integra√ß√£o cont√≠nua

üîß TECNOLOGIAS UTILIZADAS:

Backend:
- Node.js (Runtime JavaScript)
- Express (Framework web)
- MongoDB Atlas (Banco de dados)
- Nodemailer (Sistema de e-mails)
- Moment.js (Manipula√ß√£o de datas)
- CORS (Permiss√µes de acesso)
- Body-parser (Processamento de dados)

Frontend:
- HTML5 (Estrutura)
- CSS3 (Estilos responsivos)
- JavaScript ES6+ (L√≥gica)
- Chart.js (Gr√°ficos)
- Font Awesome (√çcones)
- Google Fonts (Tipografia)

Deploy:
- Vercel (Hospedagem serverless)
- GitHub (Controle de vers√£o)
- UptimeRobot (Monitoramento)

===============================================================================
                           2. BACKEND (server-web.js)
===============================================================================

‚öôÔ∏è DEPEND√äNCIAS PRINCIPAIS:

{
  "dependencies": {
    "body-parser": "^1.20.2",
    "cors": "^2.8.5",
    "express": "^4.18.2",
    "moment": "^2.29.4",
    "mongodb": "^5.9.2",
    "nodemailer": "^6.9.7"
  }
}

üóÑÔ∏è SISTEMA DE BANCO DE DADOS:

MongoDB Atlas (Principal):
- URI: mongodb+srv://jamarestudo:A91L9XOUYiCaHetq@familiajamar.wu9knb3.mongodb.net/familia-jamar
- Fun√ß√£o: Armazenamento persistente
- Vantagem: Acess√≠vel de qualquer lugar
- Fallback: JSON local se falhar

JSON Local (Fallback):
- Arquivo: database/contas.json
- Fun√ß√£o: Backup local
- Uso: Quando MongoDB n√£o est√° dispon√≠vel
- Limita√ß√£o: N√£o persiste no Vercel

üîî SISTEMA DE NOTIFICA√á√ïES:

Configura√ß√£o SMTP:
{
    gmail: {
        host: 'smtp.gmail.com',
        port: 587,
        secure: false,
        auth: {
            user: 'jamarestudo@gmail.com',
            pass: process.env.EMAIL_PASSWORD || 'mekz ihei gvuz fkgb'
        }
    }
}

Tipos de Notifica√ß√£o:
1. Contas Vencendo: Pr√≥ximos 7 dias
2. Contas Vencidas: Atrasadas
3. Relat√≥rio Completo: Todas as contas

üîÑ APIs PRINCIPAIS:

CRUD de Contas:
- GET /api/contas - Listar contas
- POST /api/contas - Criar conta
- PUT /api/contas/:id - Atualizar conta
- DELETE /api/contas/:id - Deletar conta

Notifica√ß√µes:
- POST /api/verificar-notificacoes - Trigger manual
- POST /api/enviar-email - Envio de e-mail
- POST /api/relatorio-completo - Relat√≥rio completo

===============================================================================
                           3. FRONTEND (Interface)
===============================================================================

üì± ESTRUTURA HTML (index-wix.html):

Se√ß√µes Principais:
1. Header: Navega√ß√£o e informa√ß√µes do usu√°rio
2. Dashboard: Resumo financeiro e gr√°ficos
3. Contas: Lista e gerenciamento de contas
4. Configura√ß√µes: E-mail e exporta√ß√£o/importa√ß√£o

Funcionalidades:
- Tabs responsivas: Dashboard, Contas, Configura√ß√µes
- Modais: Adicionar/editar contas, configurar e-mail
- Gr√°ficos: Pizza e barras para visualiza√ß√£o
- Filtros: Por categoria, tipo, status

‚ö° JavaScript (script-wix.js):

Comunica√ß√£o com Backend:
async function carregarDados() {
    const response = await fetch('/api/contas');
    contas = await response.json();
}

Dashboard Din√¢mico:
- C√°lculos autom√°ticos: Total, vencendo, vencidas
- Gr√°ficos interativos: Distribui√ß√£o por categoria
- Atualiza√ß√£o em tempo real: Sem recarregar p√°gina

Gerenciamento de Contas:
- CRUD completo: Criar, ler, atualizar, deletar
- Valida√ß√£o: Datas, valores, campos obrigat√≥rios
- Feedback visual: Mensagens de sucesso/erro

===============================================================================
                           4. BANCO DE DADOS
===============================================================================

üìä ESTRUTURA DE DADOS:

{
  "id": 1,
  "descricao": "Conta de Luz",
  "valor": 200,
  "dataVencimento": "2024-12-15",
  "categoria": "Energia",
  "tipo": "conta",
  "recorrente": false,
  "paga": false,
  "dataCriacao": "2025-07-31T14:08:48.756Z"
}

üìã CAMPOS PRINCIPAIS:

- id: Identificador √∫nico (auto-incremento)
- descricao: Nome da conta
- valor: Valor em reais (number)
- dataVencimento: Data de vencimento (YYYY-MM-DD)
- categoria: Tipo de conta (Energia, √Ågua, Internet, etc.)
- tipo: "conta" ou "receita"
- recorrente: Se repete mensalmente (boolean)
- paga: Status de pagamento (boolean)
- dataCriacao: Timestamp de cria√ß√£o (ISO string)

üìà CATEGORIAS PADR√ÉO:

- Energia (Conta de Luz)
- √Ågua (Conta de √Ågua)
- Internet (Internet/Telefone)
- Aluguel (Aluguel/Moradia)
- Alimenta√ß√£o (Mercado/Restaurante)
- Transporte (Combust√≠vel/√înibus)
- Sa√∫de (Plano de Sa√∫de/Medicamentos)
- Educa√ß√£o (Escola/Cursos)
- Lazer (Entretenimento)
- Outros (Diversos)

===============================================================================
                           5. DEPLOY (Vercel)
===============================================================================

‚öôÔ∏è CONFIGURA√á√ÉO (vercel.json):

{
  "version": 2,
  "builds": [
    {
      "src": "server-web.js",
      "use": "@vercel/node"
    }
  ],
  "routes": [
    {
      "src": "/(.*)",
      "dest": "/server-web.js"
    }
  ],
  "env": {
    "NODE_ENV": "production"
  }
}

üåê CARACTER√çSTICAS:

- Serverless: Fun√ß√µes ativadas sob demanda
- Auto-scaling: Ajusta automaticamente
- CDN global: R√°pido em qualquer lugar
- Integra√ß√£o Git: Deploy autom√°tico
- SSL autom√°tico: HTTPS sempre ativo
- Logs detalhados: Monitoramento completo

üîß VARI√ÅVEIS DE AMBIENTE:

- MONGODB_URI: Conex√£o com MongoDB Atlas
- EMAIL_PASSWORD: Senha do e-mail Gmail
- NODE_ENV: Ambiente (production/development)

===============================================================================
                       6. SISTEMA DE NOTIFICA√á√ïES
===============================================================================

‚è∞ MONITORAMENTO:

- Frequ√™ncia: A cada 2 horas (UptimeRobot)
- Trigger: /api/verificar-notificacoes
- Verifica√ß√£o: Contas vencendo/vencidas
- M√©todo: POST

üìß TIPOS DE E-MAIL:

1. Contas Vencendo (Pr√≥ximos 7 dias):
   - Assunto: "Contas Vencendo - Sistema Fam√≠lia Jamar"
   - Conte√∫do: Lista de contas que vencem nos pr√≥ximos 7 dias
   - Exemplo: "Conta de Luz vence em 3 dias"

2. Contas Vencidas (Atrasadas):
   - Assunto: "Contas Vencidas - Sistema Fam√≠lia Jamar"
   - Conte√∫do: Lista de contas que j√° passaram do vencimento
   - Exemplo: "Conta de √Ågua est√° 5 dias atrasada"

3. Relat√≥rio Completo (Opcional):
   - Assunto: "Relat√≥rio Completo - Sistema Fam√≠lia Jamar"
   - Conte√∫do: Todas as contas com status e valores
   - Frequ√™ncia: Conforme configurado no sistema

üîÑ PROCESSO DE NOTIFICA√á√ÉO:

UptimeRobot (a cada 2h)
    ‚Üì
Acessa seu site no Vercel
    ‚Üì
"Acorda" o servidor
    ‚Üì
Executa verifica√ß√£o de contas
    ‚Üì
Se encontrar contas vencendo/vencidas
    ‚Üì
Envia e-mail para voc√™

===============================================================================
                   7. SEGURAN√áA E CONFIABILIDADE
===============================================================================

üîê VARI√ÅVEIS DE AMBIENTE:

- MONGODB_URI: Conex√£o com banco (sens√≠vel)
- EMAIL_PASSWORD: Senha do e-mail (sens√≠vel)
- NODE_ENV: Ambiente (production/development)

üõ°Ô∏è FALLBACKS:

- MongoDB ‚Üí JSON local: Se banco falhar
- E-mail hardcoded: Se vari√°vel n√£o estiver
- UptimeRobot: Se Vercel "dormir"
- Valida√ß√£o de dados: Preven√ß√£o de erros
- Try/catch: Tratamento de exce√ß√µes

üîí SEGURAN√áA:

- CORS configurado: Controle de acesso
- Valida√ß√£o de entrada: Preven√ß√£o de inje√ß√£o
- Sanitiza√ß√£o de dados: Limpeza de inputs
- HTTPS obrigat√≥rio: Criptografia
- Headers de seguran√ßa: Prote√ß√£o adicional

===============================================================================
                       8. FUNCIONALIDADES PRINCIPAIS
===============================================================================

üí∞ GEST√ÉO FINANCEIRA:

- Controle de contas: Adicionar, editar, deletar
- Categoriza√ß√£o: Organizar por tipo
- Status de pagamento: Marcar como paga
- Contas recorrentes: Repeti√ß√£o mensal
- Valida√ß√£o de dados: Preven√ß√£o de erros
- Busca e filtros: Encontrar contas rapidamente

üìà DASHBOARD:

- Resumo financeiro: Total, vencendo, vencidas
- Gr√°ficos: Distribui√ß√£o por categoria
- Filtros: Buscar e filtrar contas
- Exporta√ß√£o: CSV para backup
- Importa√ß√£o: CSV para restaurar dados
- Atualiza√ß√£o em tempo real: Sem recarregar

üîî NOTIFICA√á√ïES:

- Alertas autom√°ticos: E-mail a cada 2h
- Contas vencendo: Pr√≥ximos 7 dias
- Contas vencidas: Atrasadas
- Relat√≥rios: Completo mensal
- Configura√ß√£o de e-mail: Interface amig√°vel
- Teste de envio: Verificar funcionamento

üì± INTERFACE:

- Responsiva: Funciona em qualquer dispositivo
- Intuitiva: F√°cil de usar
- Moderna: Design atual
- Acess√≠vel: Para todos os usu√°rios
- R√°pida: Carregamento otimizado

===============================================================================
                       9. VANTAGENS DO SISTEMA
===============================================================================

‚úÖ TECNOL√ìGICAS:

- Responsivo: Funciona em qualquer dispositivo
- Offline: Funciona sem internet (JSON local)
- Persistente: Dados salvos na nuvem
- Autom√°tico: Notifica√ß√µes sem interven√ß√£o
- Escal√°vel: Suporta crescimento
- Moderno: Tecnologias atuais

‚úÖ FUNCIONAIS:

- Simples: Interface intuitiva
- Completo: Todas as funcionalidades necess√°rias
- Confi√°vel: M√∫ltiplos fallbacks
- Gratuito: Sem custos de hospedagem
- R√°pido: Performance otimizada
- Seguro: Dados protegidos

‚úÖ ECON√îMICAS:

- Zero custo: Hospedagem gratuita
- Sem manuten√ß√£o: Autom√°tico
- Sem instala√ß√£o: Acesso via navegador
- Backup autom√°tico: Dados seguros
- Sem depend√™ncias: Funciona independente

===============================================================================
                       10. ESTRUTURA DE ARQUIVOS
===============================================================================

üìÅ ARQUIVOS ESSENCIAIS:

Backend:
- server-web.js (Servidor principal)
- package.json (Depend√™ncias)
- package-lock.json (Vers√µes exatas)
- vercel.json (Configura√ß√£o Vercel)
- .gitignore (Controle Git)

Frontend:
- public/index-wix.html (Interface principal)
- public/script-wix.js (L√≥gica frontend)
- public/styles.css (Estilos)
- public/login.html (P√°gina login)
- public/login.js (L√≥gica login)
- public/confirmar.html (Confirma√ß√£o)
- public/confirmar.js (L√≥gica confirma√ß√£o)
- public/favicon.svg (√çcone)

Banco de Dados:
- database/contas.json (Dados das contas)

Deploy:
- atualizar-github-programa.bat (Deploy autom√°tico)

üìÅ DIRET√ìRIOS:

- /public: Arquivos frontend
- /database: Dados locais
- /node_modules: Depend√™ncias (gerado)
- /.git: Controle de vers√£o

===============================================================================
                           11. CONFIGURA√á√ïES
===============================================================================

üîß CONFIGURA√á√ïES NECESS√ÅRIAS:

1. MongoDB Atlas:
   - Criar conta gratuita
   - Criar cluster
   - Configurar acesso
   - Obter URI de conex√£o

2. Vercel:
   - Conectar reposit√≥rio GitHub
   - Configurar vari√°veis de ambiente
   - Deploy autom√°tico

3. E-mail:
   - Configurar Gmail
   - Gerar senha de app
   - Configurar no sistema

4. UptimeRobot:
   - Criar conta gratuita
   - Configurar monitor
   - Intervalo de 2 horas

‚öôÔ∏è VARI√ÅVEIS DE AMBIENTE:

MONGODB_URI:
mongodb+srv://jamarestudo:A91L9XOUYiCaHetq@familiajamar.wu9knb3.mongodb.net/familia-jamar?retryWrites=true&w=majority&appName=Familiajamar

EMAIL_PASSWORD:
mekz ihei gvuz fkgb

NODE_ENV:
production

===============================================================================
                           12. TROUBLESHOOTING
===============================================================================

‚ùå PROBLEMAS COMUNS:

1. Dados n√£o persistem:
   - Verificar MONGODB_URI no Vercel
   - Confirmar conex√£o com MongoDB Atlas
   - Verificar logs do Vercel

2. E-mails n√£o chegam:
   - Verificar EMAIL_PASSWORD no Vercel
   - Testar configura√ß√£o de e-mail
   - Verificar logs do sistema

3. Notifica√ß√µes n√£o funcionam:
   - Configurar UptimeRobot
   - Verificar rota /api/verificar-notificacoes
   - Testar manualmente

4. Site n√£o carrega:
   - Verificar deploy no Vercel
   - Verificar logs de erro
   - Confirmar vari√°veis de ambiente

üîß SOLU√á√ïES:

1. Para dados n√£o persistirem:
   - Configurar MONGODB_URI no Vercel
   - Verificar conex√£o com MongoDB Atlas
   - Usar fallback JSON local

2. Para e-mails n√£o chegarem:
   - Configurar EMAIL_PASSWORD no Vercel
   - Testar envio manual
   - Verificar configura√ß√£o SMTP

3. Para notifica√ß√µes n√£o funcionarem:
   - Configurar UptimeRobot
   - Testar rota manualmente
   - Verificar logs do sistema

4. Para site n√£o carregar:
   - Verificar deploy no Vercel
   - Verificar logs de erro
   - Confirmar configura√ß√µes

===============================================================================
                                CONCLUS√ÉO
===============================================================================

üéØ O Sistema Fam√≠lia Jamar √© uma solu√ß√£o completa e robusta para 
controle financeiro familiar, oferecendo:

‚úÖ Funcionalidades completas de gest√£o financeira
‚úÖ Interface moderna e responsiva
‚úÖ Sistema de notifica√ß√µes autom√°tico
‚úÖ Persist√™ncia de dados confi√°vel
‚úÖ Deploy gratuito e escal√°vel
‚úÖ Seguran√ßa e confiabilidade

üöÄ O sistema est√° pronto para uso em produ√ß√£o e pode ser facilmente 
expandido com novas funcionalidades conforme necess√°rio.

üìû Para suporte ou d√∫vidas, consulte a documenta√ß√£o ou entre em 
contato com o desenvolvedor.

===============================================================================
                                FIM DA DOCUMENTA√á√ÉO
=============================================================================== 